<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="(Please select)" xml:space="preserve">
    <value>(Bitte auswählen)</value>
  </data>
  <data name="Accepted formats: JPG and JPEG" xml:space="preserve">
    <value>Akzeptierte Formate: JPG und JPEG</value>
  </data>
  <data name="Accepted formats: PDF, JPG, JPEG, TIFF, PNG, GIF" xml:space="preserve">
    <value>Akzeptierte Formate: PDF, JPG, JPEG, TIFF, PNG, GIF</value>
  </data>
  <data name="Address-Information" xml:space="preserve">
    <value>Adresse</value>
  </data>
  <data name="Administrative Information" xml:space="preserve">
    <value>Verwaltungsinformationen</value>
  </data>
  <data name="Bank Data" xml:space="preserve">
    <value>Bankdaten</value>
  </data>
  <data name="Choose file" xml:space="preserve">
    <value>Datei wählen</value>
  </data>
  <data name="Company name is required when occupation is self-employed." xml:space="preserve">
    <value>Der Firmenname ist obligatorisch, wenn der Beruf selbständig ist.</value>
  </data>
  <data name="Contact Data" xml:space="preserve">
    <value>Kontaktdaten</value>
  </data>
  <data name="Drivers License Type" xml:space="preserve">
    <value>Fahrausweis</value>
  </data>
  <data name="Employer is required when occupation is part or full-time." xml:space="preserve">
    <value>Der Hauptarbeitgeber ist obligatorisch, wenn der Beruf Teilzeit oder Vollzeit ist.</value>
  </data>
  <data name="Frame Contract" xml:space="preserve">
    <value>Rahmenvertrag</value>
  </data>
  <data name="Frame Contract Text" xml:space="preserve">
    <value>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vel ornare neque. Praesent mattis mi in ullamcorper rutrum. Proin ac urna tellus. In aliquam purus massa, vel euismod felis convallis et. Nam facilisis nulla ac euismod blandit. Proin cursus felis leo, at pretium ligula tempus ac. Praesent porta porttitor scelerisque. Sed mattis, dui interdum euismod ornare, velit mauris posuere elit, sit amet pulvinar turpis eros egestas sapien. Aenean dapibus urna velit, non feugiat elit congue id. Quisque cursus sodales erat, non finibus nisl elementum at. Nullam at commodo nibh, vitae mollis felis. Etiam erat nulla, vulputate vitae varius ut, eleifend id ex. Maecenas erat metus, elementum in interdum et, iaculis eu nulla. Vestibulum in velit arcu. Maecenas dapibus arcu non nulla scelerisque posuere. Donec metus turpis, consectetur vel vestibulum lacinia, iaculis ut tortor. Nulla neque mi, tincidunt sit amet ipsum vel, pharetra dignissim nunc. Ut sed neque eu purus tempor tincidunt sed nec nisl. Vestibulum interdum, ligula ut sagittis tempor, dolor mi finibus metus, in placerat magna lorem ut ipsum. Proin eleifend, neque a scelerisque malesuada, est lectus bibendum tellus, id euismod velit ante quis augue.</value>
  </data>
  <data name="I accept the contractual terms" xml:space="preserve">
    <value>Ich akzeptiere die Vertragsbedingungen</value>
  </data>
  <data name="J+S Training Certificates" xml:space="preserve">
    <value>J + S Trainingszertifikate</value>
  </data>
  <data name="JS Training Name is required if JS Training Type is not empty." xml:space="preserve">
    <value>J + S Ausbildung (Sportart) ist erforderlich, wenn Ausbildungsart nicht leer ist.</value>
  </data>
  <data name="JS Training Type is required if JS Training Name is not empty." xml:space="preserve">
    <value>Ausbildungsart ist erforderlich, wenn J + S Ausbildung (Sportart) nicht leer ist.</value>
  </data>
  <data name="Main Title" xml:space="preserve">
    <value>Anmeldung als Freelancer</value>
  </data>
  <data name="Miscellaneous Information" xml:space="preserve">
    <value>Sonstige Informationen</value>
  </data>
  <data name="Personal Data" xml:space="preserve">
    <value>Persönliche Daten</value>
  </data>
  <data name="Please accept the contractual terms!" xml:space="preserve">
    <value>Bitte akzeptieren Sie die Vertragsbedingungen!</value>
  </data>
  <data name="Profile picture is mandatory." xml:space="preserve">
    <value>Profilbild ist obligatorisch.</value>
  </data>
  <data name="Residence permit is required when selected country is not Switzerland." xml:space="preserve">
    <value>Die Aufenthaltsgenehmigung ist obligatorisch, wenn das gewählte Land nicht die Schweiz ist.</value>
  </data>
  <data name="Spoken Languages" xml:space="preserve">
    <value>Gesprochene Sprachen</value>
  </data>
  <data name="Submit" xml:space="preserve">
    <value>Einreichen</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Willkommen auf unserer Webseite</value>
  </data>
</root>