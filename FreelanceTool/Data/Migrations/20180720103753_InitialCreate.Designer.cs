// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

namespace FreelanceTool.Data.Migrations
{
	[DbContext(typeof(ApplicationDataContext))]
	[Migration("20180720103753_InitialCreate")]
	partial class InitialCreate
	{
		protected override void BuildTargetModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder
				.HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
				.HasAnnotation("Relational:MaxIdentifierLength", 128)
				.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

			modelBuilder.Entity("LivingTech.Models.Applicant", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("Address")
						.IsRequired()
						.HasMaxLength(80);

					b.Property<string>("AddressInformation")
						.HasMaxLength(80);

					b.Property<int>("ChildrenCount");

					b.Property<string>("City")
						.IsRequired()
						.HasMaxLength(40);

					b.Property<int>("CivilStatus")
						.HasMaxLength(20);

					b.Property<string>("CompanyName")
						.HasMaxLength(80);

					b.Property<string>("CompanyWebsite")
						.HasMaxLength(80);

					b.Property<int>("Country");

					b.Property<DateTime>("DateOfBirth");

					b.Property<bool>("DriverLicenseB");

					b.Property<string>("Email")
						.IsRequired()
						.HasMaxLength(80);

					b.Property<string>("Employer")
						.HasMaxLength(40);

					b.Property<string>("FirstName")
						.IsRequired()
						.HasMaxLength(80);

					b.Property<string>("IbanNumber")
						.IsRequired()
						.HasMaxLength(34);

					b.Property<int>("LanguageId");

					b.Property<string>("LastName")
						.IsRequired()
						.HasMaxLength(80);

					b.Property<int>("NationalityId");

					b.Property<int>("Occupation");

					b.Property<string>("PhoneNumber")
						.IsRequired()
						.HasMaxLength(30);

					b.Property<string>("PhonePrefix")
						.IsRequired()
						.HasMaxLength(5);

					b.Property<int>("ResidencePermit");

					b.Property<string>("Sex")
						.IsRequired()
						.HasMaxLength(30);

					b.Property<string>("SwissSocialSecurityNumber")
						.IsRequired();

					b.Property<int>("TShirtSize");

					b.Property<string>("TrainingNumber")
						.HasMaxLength(80);

					b.Property<string>("Zip")
						.IsRequired()
						.HasMaxLength(4);

					b.HasKey("Id");

					b.HasIndex("LanguageId");

					b.HasIndex("NationalityId");

					b.ToTable("Applicant");
				});

			modelBuilder.Entity("LivingTech.Models.ApplicantFile", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<int>("ApplicantId");

					b.Property<string>("Extension");

					b.Property<string>("OriginalName")
						.IsRequired();

					b.Property<string>("Path");

					b.Property<int>("Type");

					b.Property<string>("UniqueName");

					b.HasKey("Id");

					b.HasIndex("ApplicantId");

					b.ToTable("ApplicantFile");
				});

			modelBuilder.Entity("LivingTech.Models.ApplicantLanguage", b =>
				{
					b.Property<int>("ApplicantId");

					b.Property<int>("LanguageId");

					b.HasKey("ApplicantId", "LanguageId");

					b.HasIndex("LanguageId");

					b.ToTable("ApplicantLanguage");
				});

			modelBuilder.Entity("LivingTech.Models.JSTrainingCertificate", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<int>("ApplicantId");

					b.Property<string>("Name")
						.HasMaxLength(80);

					b.Property<int>("Type");

					b.HasKey("Id");

					b.HasIndex("ApplicantId");

					b.ToTable("JSTrainingCertificate");
				});

			modelBuilder.Entity("LivingTech.Models.Language", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("Name")
						.HasMaxLength(20);

					b.HasKey("Id");

					b.ToTable("Language");
				});

			modelBuilder.Entity("LivingTech.Models.Nationality", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("Alpha2")
						.IsRequired()
						.HasMaxLength(2);

					b.Property<string>("Alpha3")
						.IsRequired()
						.HasMaxLength(3);

					b.Property<int>("Code")
						.HasMaxLength(3);

					b.Property<string>("NameEnglish")
						.IsRequired()
						.HasMaxLength(45);

					b.Property<string>("NameFrench")
						.IsRequired()
						.HasMaxLength(45);

					b.Property<string>("NameGerman")
						.HasMaxLength(45);

					b.HasKey("Id");

					b.ToTable("Nationality");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
				{
					b.Property<string>("Id")
						.ValueGeneratedOnAdd();

					b.Property<string>("ConcurrencyStamp")
						.IsConcurrencyToken();

					b.Property<string>("Name")
						.HasMaxLength(256);

					b.Property<string>("NormalizedName")
						.HasMaxLength(256);

					b.HasKey("Id");

					b.HasIndex("NormalizedName")
						.IsUnique()
						.HasName("RoleNameIndex")
						.HasFilter("[NormalizedName] IS NOT NULL");

					b.ToTable("AspNetRoles");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("ClaimType");

					b.Property<string>("ClaimValue");

					b.Property<string>("RoleId")
						.IsRequired();

					b.HasKey("Id");

					b.HasIndex("RoleId");

					b.ToTable("AspNetRoleClaims");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
				{
					b.Property<string>("Id")
						.ValueGeneratedOnAdd();

					b.Property<int>("AccessFailedCount");

					b.Property<string>("ConcurrencyStamp")
						.IsConcurrencyToken();

					b.Property<string>("Email")
						.HasMaxLength(256);

					b.Property<bool>("EmailConfirmed");

					b.Property<bool>("LockoutEnabled");

					b.Property<DateTimeOffset?>("LockoutEnd");

					b.Property<string>("NormalizedEmail")
						.HasMaxLength(256);

					b.Property<string>("NormalizedUserName")
						.HasMaxLength(256);

					b.Property<string>("PasswordHash");

					b.Property<string>("PhoneNumber");

					b.Property<bool>("PhoneNumberConfirmed");

					b.Property<string>("SecurityStamp");

					b.Property<bool>("TwoFactorEnabled");

					b.Property<string>("UserName")
						.HasMaxLength(256);

					b.HasKey("Id");

					b.HasIndex("NormalizedEmail")
						.HasName("EmailIndex");

					b.HasIndex("NormalizedUserName")
						.IsUnique()
						.HasName("UserNameIndex")
						.HasFilter("[NormalizedUserName] IS NOT NULL");

					b.ToTable("AspNetUsers");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("ClaimType");

					b.Property<string>("ClaimValue");

					b.Property<string>("UserId")
						.IsRequired();

					b.HasKey("Id");

					b.HasIndex("UserId");

					b.ToTable("AspNetUserClaims");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
				{
					b.Property<string>("LoginProvider")
						.HasMaxLength(128);

					b.Property<string>("ProviderKey")
						.HasMaxLength(128);

					b.Property<string>("ProviderDisplayName");

					b.Property<string>("UserId")
						.IsRequired();

					b.HasKey("LoginProvider", "ProviderKey");

					b.HasIndex("UserId");

					b.ToTable("AspNetUserLogins");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
				{
					b.Property<string>("UserId");

					b.Property<string>("RoleId");

					b.HasKey("UserId", "RoleId");

					b.HasIndex("RoleId");

					b.ToTable("AspNetUserRoles");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
				{
					b.Property<string>("UserId");

					b.Property<string>("LoginProvider")
						.HasMaxLength(128);

					b.Property<string>("Name")
						.HasMaxLength(128);

					b.Property<string>("Value");

					b.HasKey("UserId", "LoginProvider", "Name");

					b.ToTable("AspNetUserTokens");
				});

			modelBuilder.Entity("LivingTech.Models.Applicant", b =>
				{
					b.HasOne("LivingTech.Models.Language", "MainLanguage")
						.WithMany("Applicants")
						.HasForeignKey("LanguageId")
						.OnDelete(DeleteBehavior.Cascade);

					b.HasOne("LivingTech.Models.Nationality", "Nationality")
						.WithMany("Applicants")
						.HasForeignKey("NationalityId")
						.OnDelete(DeleteBehavior.Cascade);
				});

			modelBuilder.Entity("LivingTech.Models.ApplicantFile", b =>
				{
					b.HasOne("LivingTech.Models.Applicant", "Applicant")
						.WithMany("ApplicantFiles")
						.HasForeignKey("ApplicantId")
						.OnDelete(DeleteBehavior.Cascade);
				});

			modelBuilder.Entity("LivingTech.Models.ApplicantLanguage", b =>
				{
					b.HasOne("LivingTech.Models.Applicant", "Applicant")
						.WithMany("SpokenLanguages")
						.HasForeignKey("ApplicantId")
						.OnDelete(DeleteBehavior.Cascade);

					b.HasOne("LivingTech.Models.Language", "Language")
						.WithMany()
						.HasForeignKey("LanguageId")
						.OnDelete(DeleteBehavior.Cascade);
				});

			modelBuilder.Entity("LivingTech.Models.JSTrainingCertificate", b =>
				{
					b.HasOne("LivingTech.Models.Applicant", "Applicant")
						.WithMany("JsTrainingCertificates")
						.HasForeignKey("ApplicantId")
						.OnDelete(DeleteBehavior.Cascade);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
						.WithMany()
						.HasForeignKey("RoleId")
						.OnDelete(DeleteBehavior.Cascade);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
						.WithMany()
						.HasForeignKey("RoleId")
						.OnDelete(DeleteBehavior.Cascade);

					b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade);
				});
#pragma warning restore 612, 618
		}
	}
}
